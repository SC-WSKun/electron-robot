/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 wangcai.gltf --transform --types 
Files: wangcai.gltf [42.49KB] > /Users/weishuokun/mycode/electron/electron-robot/src/assets/model/wangcai/wangcai-transformed.glb [88.1KB] (-107%)
*/

import * as THREE from 'three'
import React from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations } from '@react-three/drei'
import { GLTF, SkeletonUtils } from 'three-stdlib'

type ActionName = '骨架动作'

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName
}

type GLTFResult = GLTF & {
  nodes: {
    Group18985_default_0001: THREE.Mesh
    Box002_default_0: THREE.SkinnedMesh
    Object001_default_0: THREE.SkinnedMesh
    骨骼003: THREE.Bone
    骨骼017: THREE.Bone
    骨骼008: THREE.Bone
    骨骼011: THREE.Bone
    骨骼016: THREE.Bone
    neutral_bone: THREE.Bone
  }
  materials: {
    ['default.001']: THREE.MeshBasicMaterial
    ['default.001']: THREE.MeshBasicMaterial
    ['default.001']: THREE.MeshBasicMaterial
  }
  animations: GLTFAction[]
}

export function WangcaiModel(props: JSX.IntrinsicElements['group']) {
  const group = React.useRef<THREE.Group>(null)
  try{

  const { scene, animations } = useGLTF('/wangcai.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone) as GLTFResult
  const { actions } = useAnimations(animations, group)
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <group name="骨架" position={[0.031, -0.587, -0.567]} rotation={[2.991, 0, 0]} scale={[0.306, 0.221, 0.262]}>
          <primitive object={nodes.骨骼003} />
          <primitive object={nodes.骨骼017} />
          <primitive object={nodes.骨骼008} />
          <primitive object={nodes.骨骼011} />
          <primitive object={nodes.骨骼016} />
        </group>
        <primitive object={nodes.neutral_bone} />
        <mesh name="Group18985_default_0001" geometry={nodes.Group18985_default_0001.geometry} material={materials['default.001']} position={[0.016, 0.004, -0.014]} rotation={[-1.575, 0, 0]} scale={[1, 1.001, 1.001]} />
        <skinnedMesh name="Box002_default_0" geometry={nodes.Box002_default_0.geometry} material={materials['default.001']} skeleton={nodes.Box002_default_0.skeleton} position={[0.031, -0.587, -0.567]} rotation={[2.991, 0, 0]} scale={[0.306, 0.221, 0.262]} />
        <skinnedMesh name="Object001_default_0" geometry={nodes.Object001_default_0.geometry} material={materials['default.001']} skeleton={nodes.Object001_default_0.skeleton} position={[0.031, -0.587, -0.567]} rotation={[2.991, 0, 0]} scale={[0.306, 0.221, 0.262]} />
      </group>
    </group>
  )
}catch(error){
  console.error('Failed to load or render the model:', error)
  return <div>模型加载失败</div>
}
}

useGLTF.preload('/wangcai.glb')
